extends layout/default_layout

block contents
  h1=title
    span.text-muted.ml-2.sub #{address}

  div#app(v-cloak)
    table.table.table-striped.table-bordered._table-sm.w-100
      thead
        tr
          th Transaction Count
          td 
            i.fas.fa-lg.fa-spinner.fa-pulse(v-if="transactionCount===null") 
            {{ transactionCount }}
        tr(v-if="isContract&&isItem")
          th Data
          td
            //- textarea(disabled, readonly, rows="25") {{ code }}
            table.table.table-striped.table-bordered._table-sm.w-100
              thead
                tr
                  th SHID
                    td {{ shid }}
                tr
                  th 產出品項
                    td {{ title }}
                tr
                  th 產出作業
                    td {{ procedureList }}
                tr
                  th 產出組織
                    td {{ organizationName }}
                tr
                  th 組織地址
                    td {{ organization }}
                tr
                  th 產出日期
                    td {{ producedDate }}
                tr
                  th 有效日期
                    td {{ expirationDate }}
                tr
                  th 目前數量
                    td {{ restNumber }}
                tr
                  th 產出數量
                    td {{ producedNumber }}
                tr
                  th 原料來源
                    td
                      {{ sourceList }}
                tr
                  th 作為原料
                    td {{ destinationList }}
  
  script.

    var app = new Vue({
      el: '#app',
      data: {
        isItem: false,
        isProduct: false,
        address: '#{address}',
        itemJSON: '#{itemJSON}',
        productJSON: '#{productJSON}',
        balance: null,
        balance_eth: null,
        balance_usd: null,
        storage: null,
        code: null,
        transactionCount: null,
        shid: null,
        title: null,
        organization: null,
        organizationName: null,
        producedDate: null,
        expirationDate: null,
        restNumber: null,
        producedNumber: null,
        sourceList: null,
        destinationList: null,
        procedureList: null
      },
      computed: {
        isContract: function() {
          return (this.code && this.code.length > 3);
        }
      },
      created: function() {
        getAddressInfo.bind(this)();
      }
    });

    function getBalance(address) {
      return new Promise((res, rej) => {
        web3.eth.getBalance(address, (error, result) => {
          if(error) rej(error);
          else res(result.toString(10));
        });
      });
    }

    function getStorageAt(address) {
      return new Promise((res, rej) => {
        web3.eth.getStorageAt(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getCode(address) {
      return new Promise((res, rej) => {
        web3.eth.getCode(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getTransactionCount(address) {
      return new Promise((res, rej) => {
        web3.eth.getTransactionCount(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }


    function getETHUSD(balance) {
      return new Promise((res, rej) => {
        $.getJSON("https://api.coinmarketcap.com/v1/ticker/ethereum/", function(json) {
          var price = Number(json[0].price_usd);
          var ethusd = price.toFixed(2);
          var balanceusd = "$ " + (ethusd * balance);
          res(balanceusd);
        });
      });
    }

    async function getAddressInfo(address) {
      let self = app || this;
      address = address || self.address;
      //- self.storage = await getStorageAt(address);
      self.code = await getCode(address);
      self.transactionCount = await getTransactionCount(address);
      const itemjson = JSON.parse(self.itemJSON.replace(/&quot;/g,'"'))
      const productjson = JSON.parse(self.productJSON.replace(/&quot;/g,'"'))
      //- console.log(self.code)
      //- console.log(itemjson.bytecode)
      //- console.log(self.code === itemjson.deployedBytecode)
      if (self.code === itemjson.deployedBytecode) {
        self.isItem = true;
        const itemFactory = new ethers.ContractFactory(
          itemjson.abi,
          self.code,
        );
        const signer = new ethers.Wallet("0x17bcf85e639fa3e467e99bef103e1401a12989bbee7d787409cae16d24191e21", GEtherProvider);
        const item = await itemFactory.connect(signer).attach(address)
        const itemData = await item.itemData();
        const quantity = await item.quantity();
        const sourceList = await item.getSourceList();
        //- const sourceList = "AAAAA"
        const destinationList = await item.getDestinationList();
        const procedureList = await item.getProcedureList();
        console.log(sourceList)
        self.shid = itemData.shid
        self.title = itemData.name
        self.organization = itemData.organization
        self.organizationName = itemData.organizationName
        //- console.log(parseInt(itemData.producedDate.toString(), 10))
        self.producedDate = new Date(parseInt(itemData.producedDate.toString(), 10) * 1000)
        self.expirationDate = new Date(parseInt(itemData.expirationDate.toString(), 10) * 1000)
        self.restNumber = quantity.restNumber.toString() + ` ${quantity.unit}`;
        self.producedNumber = quantity.producedNumber.toString() + ` ${quantity.unit}`;
        console.log(JSON.stringify(sourceList.map((ele) => { 
          let obj =  { 
            name: ele.name,
            usedObject: ele.usedObject,
            usedNumber: ele.usedNumber.toString()
          }
          if (ele.shid.isZero()) {
            obj.phid = ele.phid.toString()
          } else {
            obj.shid = ele.shid.toString()
          }
          return obj
        }), null, 4))
        self.sourceList = JSON.stringify(sourceList.map((ele) => { 
          let obj =  { 
            name: ele.name,
            usedObject: ele.usedObject,
            usedNumber: ele.usedNumber.toString()
          }
          if (ele.shid.isZero()) {
            obj.phid = ele.phid.toString()
          } else {
            obj.shid = ele.shid.toString()
          }
          return obj
        }), null, 4);
        self.destinationList = JSON.stringify(destinationList.map((ele) => { 
          let obj =  { 
            name: ele.name,
            usedObject: ele.usedObject,
            usedNumber: ele.usedNumber.toString()
          }
          if (ele.shid.isZero()) {
            obj.phid = ele.phid.toString()
          } else {
            obj.shid = ele.shid.toString()
          }
          return obj
        }), null, 4);
        self.procedureList = JSON.stringify(procedureList.map((ele) => {
          return {
            procedure: ele.procedure,
            name: ele.name,
            startTime: new Date(parseInt(ele.startTime.toString(), 10) * 1000),
            endTime: new Date(parseInt(ele.endTime.toString(), 10) * 1000),
            mediaList: ele.mediaList,
            sensorDataURLs: ele.sensorDataURLs
          }
        }), null, 4)
      }

      //- alert("AAA")
      //- self.organization ='(' + web3.fromWei(app.balance, 'ether').toString(10) + ' ETH)';
      //- console.log(itemABI)
      //- const item = new web3.eth.Contract(itemABI, address)
      //- const itemData = await item.itemData().call();
      //- console.log(itemData)
    }
